n_cell = 64 64 4
max_grid_size_x = 64
max_grid_size_y = 64
max_grid_size_z = 4
dt = 2.5e-14
nsteps = 100000
plot_int = 1000
chk_int = 100000

prob_lo = -25.0e-9 -25.0e-9 -1.0e-9
prob_hi =  25.0e-9  25.0e-9  1.0e-9

mu0 = 1.25663706212e-6 
precession = 1
demag_coupling = 0
M_normalization = 1
exchange_coupling = 1
DMI_coupling = 1
anisotropy_coupling = 1

diag_type = 5

timedependent_alpha = 0
alpha_parser(x,y,z,t) =  "      0.05*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
Ms_parser(x,y,z) =       "     1.1e6*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is Ampere/m
gamma_parser(x,y,z) =    " -1.759e11*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
exchange_parser(x,y,z) = "  16.0e-12*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m
anisotropy_parser(x,y,z) = " 510.0e3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^3
anisotropy_axis = 0.0 0.0 1.0

# D_c = 4 sqrt(AK) / pi = 3.6371e-3
#DMI_parser(x,y,z) = "       -1.25e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -1.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -2.0e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -2.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -3.0e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -3.25e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "      -3.375e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -3.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
DMI_parser(x,y,z) = "      -3.625e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -3.75e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -4.0e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -4.25e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -4.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -5.0e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -5.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -6.0e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -6.5e-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "         -7.0-3*(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2

# quasi-uniform initialization: change the value before pi to 0; or Mx = My = 0; Mz(i,j,k) = (sqrt(x*x + y*y) <= 25.0e-9) ? Ms_arr(i,j,k):0.0;
# skyrmion initialization: sin(pi * sqrt(x*x + y*y) / 25.0e-9)
# 2pi state initialization: sin(2*pi * sqrt(x*x + y*y) / 25.0e-9)
# 3pi state initialization: sin(3*pi * sqrt(x*x + y*y) / 25.0e-9)
Mx_parser(x,y,z) = "1.1e6 * sin(1*3.141592654 * sqrt(x*x + y*y) / 25.0e-9) * x/sqrt(x*x + y*y) *(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
My_parser(x,y,z) = "1.1e6 * sin(1*3.141592654 * sqrt(x*x + y*y) / 25.0e-9) * y/sqrt(x*x + y*y) *(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
Mz_parser(x,y,z) = "1.1e6 * cos(1*3.141592654 * sqrt(x*x + y*y) / 25.0e-9) *(sqrt(x*x + y*y) <= 25.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # for the skyrmion state

timedependent_Hbias = 0
Hx_bias_parser(x,y,z,t) = "0.0"
Hy_bias_parser(x,y,z,t) = "0.0"
Hz_bias_parser(x,y,z,t) = "0.0"

#TimeIntegratorOption = 1 #Forward Euler
#TimeIntegratorOption = 2 #Predictor-corrector
#TimeIntegratorOption = 3 #2nd order artemis way
TimeIntegratorOption = 4 #amrex/sundials backend integrators

# tolerance threshold (L_inf change between iterations) for TimeIntegrationOption 2 and 3
iterative_tolerance = 1.e-9
## amrex/sundials backend integrators
## *** Selecting the integrator backend ***
## integration.type can take on the following string or int values:
## (without the quotation marks)
## "ForwardEuler" or "0" = Native Forward Euler Integrator
## "RungeKutta" or "1"   = Native Explicit Runge Kutta controlled by integration.rk.type
## "SUNDIALS" or "2"     = SUNDIALS Integrators controlled by integration.sundials.strategy
integration.type = RungeKutta

## *** Parameters Needed For Native Explicit Runge-Kutta ***
#
## integration.rk.type can take the following values:
### 0 = User-specified Butcher Tableau
### 1 = Forward Euler
### 2 = Trapezoid Method
### 3 = SSPRK3 Method
### 4 = RK4 Method
integration.rk.type = 4

## If using a user-specified Butcher Tableau, then
## set nodes, weights, and table entries here:
#
## The Butcher Tableau is read as a flattened,
## lower triangular matrix (but including the diagonal)
## in row major format.
integration.rk.weights = 1
integration.rk.nodes = 0
integration.rk.tableau = 0.0

## *** Parameters Needed For SUNDIALS Integrators ***
## integration.sundials.strategy specifies which ARKODE strategy to use.
## The available options are (without the quotations):
## "ERK" = Explicit Runge Kutta
## "MRI" = Multirate Integrator
## "MRITEST" = Tests the Multirate Integrator by setting a zero-valued fast RHS function
## for example:
integration.sundials.strategy = ERK

## *** Parameters Specific to SUNDIALS ERK Strategy ***
## (Requires integration.type=SUNDIALS and integration.sundials.strategy=ERK)
## integration.sundials.erk.method specifies which explicit Runge Kutta method
## for SUNDIALS to use. The following options are supported:
## "SSPRK3" = 3rd order strong stability preserving RK (default)
## "Trapezoid" = 2nd order trapezoidal rule
## "ForwardEuler" = 1st order forward euler
## for example:
integration.sundials.erk.method = SSPRK3

## *** Parameters Specific to SUNDIALS MRI Strategy ***
## (Requires integration.type=SUNDIALS and integration.sundials.strategy=MRI)
## integration.sundials.mri.implicit_inner specifies whether or not to use an implicit inner solve
## integration.sundials.mri.outer_method specifies which outer (slow) method to use
## integration.sundials.mri.inner_method specifies which inner (fast) method to use
## The following options are supported for both the inner and outer methods:
## "KnothWolke3" = 3rd order Knoth-Wolke method (default for outer method)
## "Trapezoid" = 2nd order trapezoidal rule
## "ForwardEuler" = 1st order forward euler (default for inner method)
## for example:
integration.sundials.mri.implicit_inner = false
integration.sundials.mri.outer_method = KnothWolke3
integration.sundials.mri.inner_method = Trapezoid
